// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/redis/pool_iface.go

// Package mock_redis is a generated GoMock package.
package mock_redis

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	redis "github.com/gomodule/redigo/redis"
	reflect "reflect"
)

// MockPooler is a mock of Pooler interface
type MockPooler struct {
	ctrl     *gomock.Controller
	recorder *MockPoolerMockRecorder
}

// MockPoolerMockRecorder is the mock recorder for MockPooler
type MockPoolerMockRecorder struct {
	mock *MockPooler
}

// NewMockPooler creates a new mock instance
func NewMockPooler(ctrl *gomock.Controller) *MockPooler {
	mock := &MockPooler{ctrl: ctrl}
	mock.recorder = &MockPoolerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPooler) EXPECT() *MockPoolerMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockPooler) Get() redis.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(redis.Conn)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockPoolerMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPooler)(nil).Get))
}

// GetContext mocks base method
func (m *MockPooler) GetContext(ctx context.Context) (redis.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext", ctx)
	ret0, _ := ret[0].(redis.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContext indicates an expected call of GetContext
func (mr *MockPoolerMockRecorder) GetContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockPooler)(nil).GetContext), ctx)
}

// Stats mocks base method
func (m *MockPooler) Stats() redis.PoolStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(redis.PoolStats)
	return ret0
}

// Stats indicates an expected call of Stats
func (mr *MockPoolerMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockPooler)(nil).Stats))
}

// ActiveCount mocks base method
func (m *MockPooler) ActiveCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// ActiveCount indicates an expected call of ActiveCount
func (mr *MockPoolerMockRecorder) ActiveCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveCount", reflect.TypeOf((*MockPooler)(nil).ActiveCount))
}

// IdleCount mocks base method
func (m *MockPooler) IdleCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdleCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// IdleCount indicates an expected call of IdleCount
func (mr *MockPoolerMockRecorder) IdleCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdleCount", reflect.TypeOf((*MockPooler)(nil).IdleCount))
}

// Close mocks base method
func (m *MockPooler) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockPoolerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPooler)(nil).Close))
}
