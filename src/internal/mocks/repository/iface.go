// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/iface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	domain "github.com/Marchie/tf-experiment/lambda/internal/domain"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockAtcoCodeLister is a mock of AtcoCodeLister interface
type MockAtcoCodeLister struct {
	ctrl     *gomock.Controller
	recorder *MockAtcoCodeListerMockRecorder
}

// MockAtcoCodeListerMockRecorder is the mock recorder for MockAtcoCodeLister
type MockAtcoCodeListerMockRecorder struct {
	mock *MockAtcoCodeLister
}

// NewMockAtcoCodeLister creates a new mock instance
func NewMockAtcoCodeLister(ctrl *gomock.Controller) *MockAtcoCodeLister {
	mock := &MockAtcoCodeLister{ctrl: ctrl}
	mock.recorder = &MockAtcoCodeListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAtcoCodeLister) EXPECT() *MockAtcoCodeListerMockRecorder {
	return m.recorder
}

// GetAtcoCodesInStopArea mocks base method
func (m *MockAtcoCodeLister) GetAtcoCodesInStopArea(stopAreaCode string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAtcoCodesInStopArea", stopAreaCode)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAtcoCodesInStopArea indicates an expected call of GetAtcoCodesInStopArea
func (mr *MockAtcoCodeListerMockRecorder) GetAtcoCodesInStopArea(stopAreaCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAtcoCodesInStopArea", reflect.TypeOf((*MockAtcoCodeLister)(nil).GetAtcoCodesInStopArea), stopAreaCode)
}

// MockEventScheduler is a mock of EventScheduler interface
type MockEventScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockEventSchedulerMockRecorder
}

// MockEventSchedulerMockRecorder is the mock recorder for MockEventScheduler
type MockEventSchedulerMockRecorder struct {
	mock *MockEventScheduler
}

// NewMockEventScheduler creates a new mock instance
func NewMockEventScheduler(ctrl *gomock.Controller) *MockEventScheduler {
	mock := &MockEventScheduler{ctrl: ctrl}
	mock.recorder = &MockEventSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventScheduler) EXPECT() *MockEventSchedulerMockRecorder {
	return m.recorder
}

// Schedule mocks base method
func (m *MockEventScheduler) Schedule(ctx context.Context, events []*domain.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule", ctx, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// Schedule indicates an expected call of Schedule
func (mr *MockEventSchedulerMockRecorder) Schedule(ctx, events interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockEventScheduler)(nil).Schedule), ctx, events)
}

// MockMetrolinkDeparturesFetcher is a mock of MetrolinkDeparturesFetcher interface
type MockMetrolinkDeparturesFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockMetrolinkDeparturesFetcherMockRecorder
}

// MockMetrolinkDeparturesFetcherMockRecorder is the mock recorder for MockMetrolinkDeparturesFetcher
type MockMetrolinkDeparturesFetcherMockRecorder struct {
	mock *MockMetrolinkDeparturesFetcher
}

// NewMockMetrolinkDeparturesFetcher creates a new mock instance
func NewMockMetrolinkDeparturesFetcher(ctrl *gomock.Controller) *MockMetrolinkDeparturesFetcher {
	mock := &MockMetrolinkDeparturesFetcher{ctrl: ctrl}
	mock.recorder = &MockMetrolinkDeparturesFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetrolinkDeparturesFetcher) EXPECT() *MockMetrolinkDeparturesFetcherMockRecorder {
	return m.recorder
}

// Fetch mocks base method
func (m *MockMetrolinkDeparturesFetcher) Fetch(ctx context.Context) (*domain.MetrolinkDepartures, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx)
	ret0, _ := ret[0].(*domain.MetrolinkDepartures)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockMetrolinkDeparturesFetcherMockRecorder) Fetch(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockMetrolinkDeparturesFetcher)(nil).Fetch), ctx)
}

// MockMetrolinkDeparturesGetter is a mock of MetrolinkDeparturesGetter interface
type MockMetrolinkDeparturesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockMetrolinkDeparturesGetterMockRecorder
}

// MockMetrolinkDeparturesGetterMockRecorder is the mock recorder for MockMetrolinkDeparturesGetter
type MockMetrolinkDeparturesGetterMockRecorder struct {
	mock *MockMetrolinkDeparturesGetter
}

// NewMockMetrolinkDeparturesGetter creates a new mock instance
func NewMockMetrolinkDeparturesGetter(ctrl *gomock.Controller) *MockMetrolinkDeparturesGetter {
	mock := &MockMetrolinkDeparturesGetter{ctrl: ctrl}
	mock.recorder = &MockMetrolinkDeparturesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetrolinkDeparturesGetter) EXPECT() *MockMetrolinkDeparturesGetterMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockMetrolinkDeparturesGetter) Get(ctx context.Context, stopAreaCode string) ([]*domain.MetrolinkDeparture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, stopAreaCode)
	ret0, _ := ret[0].([]*domain.MetrolinkDeparture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMetrolinkDeparturesGetterMockRecorder) Get(ctx, stopAreaCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMetrolinkDeparturesGetter)(nil).Get), ctx, stopAreaCode)
}

// MockMetrolinkDeparturesStorer is a mock of MetrolinkDeparturesStorer interface
type MockMetrolinkDeparturesStorer struct {
	ctrl     *gomock.Controller
	recorder *MockMetrolinkDeparturesStorerMockRecorder
}

// MockMetrolinkDeparturesStorerMockRecorder is the mock recorder for MockMetrolinkDeparturesStorer
type MockMetrolinkDeparturesStorerMockRecorder struct {
	mock *MockMetrolinkDeparturesStorer
}

// NewMockMetrolinkDeparturesStorer creates a new mock instance
func NewMockMetrolinkDeparturesStorer(ctrl *gomock.Controller) *MockMetrolinkDeparturesStorer {
	mock := &MockMetrolinkDeparturesStorer{ctrl: ctrl}
	mock.recorder = &MockMetrolinkDeparturesStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetrolinkDeparturesStorer) EXPECT() *MockMetrolinkDeparturesStorerMockRecorder {
	return m.recorder
}

// Store mocks base method
func (m *MockMetrolinkDeparturesStorer) Store(ctx context.Context, departures []*domain.MetrolinkDeparture) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, departures)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store
func (mr *MockMetrolinkDeparturesStorerMockRecorder) Store(ctx, departures interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockMetrolinkDeparturesStorer)(nil).Store), ctx, departures)
}

// MockSystemStatusGetter is a mock of SystemStatusGetter interface
type MockSystemStatusGetter struct {
	ctrl     *gomock.Controller
	recorder *MockSystemStatusGetterMockRecorder
}

// MockSystemStatusGetterMockRecorder is the mock recorder for MockSystemStatusGetter
type MockSystemStatusGetterMockRecorder struct {
	mock *MockSystemStatusGetter
}

// NewMockSystemStatusGetter creates a new mock instance
func NewMockSystemStatusGetter(ctrl *gomock.Controller) *MockSystemStatusGetter {
	mock := &MockSystemStatusGetter{ctrl: ctrl}
	mock.recorder = &MockSystemStatusGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSystemStatusGetter) EXPECT() *MockSystemStatusGetterMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockSystemStatusGetter) Get(ctx context.Context) (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSystemStatusGetterMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSystemStatusGetter)(nil).Get), ctx)
}

// MockSystemStatusSetter is a mock of SystemStatusSetter interface
type MockSystemStatusSetter struct {
	ctrl     *gomock.Controller
	recorder *MockSystemStatusSetterMockRecorder
}

// MockSystemStatusSetterMockRecorder is the mock recorder for MockSystemStatusSetter
type MockSystemStatusSetterMockRecorder struct {
	mock *MockSystemStatusSetter
}

// NewMockSystemStatusSetter creates a new mock instance
func NewMockSystemStatusSetter(ctrl *gomock.Controller) *MockSystemStatusSetter {
	mock := &MockSystemStatusSetter{ctrl: ctrl}
	mock.recorder = &MockSystemStatusSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSystemStatusSetter) EXPECT() *MockSystemStatusSetterMockRecorder {
	return m.recorder
}

// Set mocks base method
func (m *MockSystemStatusSetter) Set(ctx context.Context, lastUpdated time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, lastUpdated)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockSystemStatusSetterMockRecorder) Set(ctx, lastUpdated interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSystemStatusSetter)(nil).Set), ctx, lastUpdated)
}

// MockPlatformNamer is a mock of PlatformNamer interface
type MockPlatformNamer struct {
	ctrl     *gomock.Controller
	recorder *MockPlatformNamerMockRecorder
}

// MockPlatformNamerMockRecorder is the mock recorder for MockPlatformNamer
type MockPlatformNamerMockRecorder struct {
	mock *MockPlatformNamer
}

// NewMockPlatformNamer creates a new mock instance
func NewMockPlatformNamer(ctrl *gomock.Controller) *MockPlatformNamer {
	mock := &MockPlatformNamer{ctrl: ctrl}
	mock.recorder = &MockPlatformNamerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlatformNamer) EXPECT() *MockPlatformNamerMockRecorder {
	return m.recorder
}

// GetPlatformNameForAtcoCode mocks base method
func (m *MockPlatformNamer) GetPlatformNameForAtcoCode(atcoCode string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatformNameForAtcoCode", atcoCode)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatformNameForAtcoCode indicates an expected call of GetPlatformNameForAtcoCode
func (mr *MockPlatformNamerMockRecorder) GetPlatformNameForAtcoCode(atcoCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformNameForAtcoCode", reflect.TypeOf((*MockPlatformNamer)(nil).GetPlatformNameForAtcoCode), atcoCode)
}

// MockStopsInAreaFetcher is a mock of StopsInAreaFetcher interface
type MockStopsInAreaFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockStopsInAreaFetcherMockRecorder
}

// MockStopsInAreaFetcherMockRecorder is the mock recorder for MockStopsInAreaFetcher
type MockStopsInAreaFetcherMockRecorder struct {
	mock *MockStopsInAreaFetcher
}

// NewMockStopsInAreaFetcher creates a new mock instance
func NewMockStopsInAreaFetcher(ctrl *gomock.Controller) *MockStopsInAreaFetcher {
	mock := &MockStopsInAreaFetcher{ctrl: ctrl}
	mock.recorder = &MockStopsInAreaFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStopsInAreaFetcher) EXPECT() *MockStopsInAreaFetcherMockRecorder {
	return m.recorder
}

// FetchStopsInArea mocks base method
func (m *MockStopsInAreaFetcher) FetchStopsInArea(ctx context.Context) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchStopsInArea", ctx)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchStopsInArea indicates an expected call of FetchStopsInArea
func (mr *MockStopsInAreaFetcherMockRecorder) FetchStopsInArea(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchStopsInArea", reflect.TypeOf((*MockStopsInAreaFetcher)(nil).FetchStopsInArea), ctx)
}

// MockStopsInAreaGetter is a mock of StopsInAreaGetter interface
type MockStopsInAreaGetter struct {
	ctrl     *gomock.Controller
	recorder *MockStopsInAreaGetterMockRecorder
}

// MockStopsInAreaGetterMockRecorder is the mock recorder for MockStopsInAreaGetter
type MockStopsInAreaGetterMockRecorder struct {
	mock *MockStopsInAreaGetter
}

// NewMockStopsInAreaGetter creates a new mock instance
func NewMockStopsInAreaGetter(ctrl *gomock.Controller) *MockStopsInAreaGetter {
	mock := &MockStopsInAreaGetter{ctrl: ctrl}
	mock.recorder = &MockStopsInAreaGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStopsInAreaGetter) EXPECT() *MockStopsInAreaGetterMockRecorder {
	return m.recorder
}

// GetStopsInArea mocks base method
func (m *MockStopsInAreaGetter) GetStopsInArea(ctx context.Context, stopAreaCode string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStopsInArea", ctx, stopAreaCode)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStopsInArea indicates an expected call of GetStopsInArea
func (mr *MockStopsInAreaGetterMockRecorder) GetStopsInArea(ctx, stopAreaCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStopsInArea", reflect.TypeOf((*MockStopsInAreaGetter)(nil).GetStopsInArea), ctx, stopAreaCode)
}

// MockStopsInAreaStorer is a mock of StopsInAreaStorer interface
type MockStopsInAreaStorer struct {
	ctrl     *gomock.Controller
	recorder *MockStopsInAreaStorerMockRecorder
}

// MockStopsInAreaStorerMockRecorder is the mock recorder for MockStopsInAreaStorer
type MockStopsInAreaStorerMockRecorder struct {
	mock *MockStopsInAreaStorer
}

// NewMockStopsInAreaStorer creates a new mock instance
func NewMockStopsInAreaStorer(ctrl *gomock.Controller) *MockStopsInAreaStorer {
	mock := &MockStopsInAreaStorer{ctrl: ctrl}
	mock.recorder = &MockStopsInAreaStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStopsInAreaStorer) EXPECT() *MockStopsInAreaStorerMockRecorder {
	return m.recorder
}

// StoreStopsInArea mocks base method
func (m *MockStopsInAreaStorer) StoreStopsInArea(ctx context.Context, stopsInArea map[string][]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreStopsInArea", ctx, stopsInArea)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreStopsInArea indicates an expected call of StoreStopsInArea
func (mr *MockStopsInAreaStorerMockRecorder) StoreStopsInArea(ctx, stopsInArea interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreStopsInArea", reflect.TypeOf((*MockStopsInAreaStorer)(nil).StoreStopsInArea), ctx, stopsInArea)
}
