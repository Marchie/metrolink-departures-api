// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/compression/iface.go

// Package mock_compression is a generated GoMock package.
package mock_compression

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockExtractor is a mock of Extractor interface
type MockExtractor struct {
	ctrl     *gomock.Controller
	recorder *MockExtractorMockRecorder
}

// MockExtractorMockRecorder is the mock recorder for MockExtractor
type MockExtractorMockRecorder struct {
	mock *MockExtractor
}

// NewMockExtractor creates a new mock instance
func NewMockExtractor(ctrl *gomock.Controller) *MockExtractor {
	mock := &MockExtractor{ctrl: ctrl}
	mock.recorder = &MockExtractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExtractor) EXPECT() *MockExtractorMockRecorder {
	return m.recorder
}

// ExtractFile mocks base method
func (m *MockExtractor) ExtractFile(zipData []byte, filename string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractFile", zipData, filename)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractFile indicates an expected call of ExtractFile
func (mr *MockExtractorMockRecorder) ExtractFile(zipData, filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractFile", reflect.TypeOf((*MockExtractor)(nil).ExtractFile), zipData, filename)
}
