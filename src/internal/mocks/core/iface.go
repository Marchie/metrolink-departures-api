// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/iface.go

// Package mock_core is a generated GoMock package.
package mock_core

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockStopAreaDeparturesJsoner is a mock of StopAreaDeparturesJsoner interface
type MockStopAreaDeparturesJsoner struct {
	ctrl     *gomock.Controller
	recorder *MockStopAreaDeparturesJsonerMockRecorder
}

// MockStopAreaDeparturesJsonerMockRecorder is the mock recorder for MockStopAreaDeparturesJsoner
type MockStopAreaDeparturesJsonerMockRecorder struct {
	mock *MockStopAreaDeparturesJsoner
}

// NewMockStopAreaDeparturesJsoner creates a new mock instance
func NewMockStopAreaDeparturesJsoner(ctrl *gomock.Controller) *MockStopAreaDeparturesJsoner {
	mock := &MockStopAreaDeparturesJsoner{ctrl: ctrl}
	mock.recorder = &MockStopAreaDeparturesJsonerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStopAreaDeparturesJsoner) EXPECT() *MockStopAreaDeparturesJsonerMockRecorder {
	return m.recorder
}

// Json mocks base method
func (m *MockStopAreaDeparturesJsoner) Json(ctx context.Context, stopAreaCode string) (io.ReadCloser, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Json", ctx, stopAreaCode)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Json indicates an expected call of Json
func (mr *MockStopAreaDeparturesJsonerMockRecorder) Json(ctx, stopAreaCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Json", reflect.TypeOf((*MockStopAreaDeparturesJsoner)(nil).Json), ctx, stopAreaCode)
}

// MockEventScheduler is a mock of EventScheduler interface
type MockEventScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockEventSchedulerMockRecorder
}

// MockEventSchedulerMockRecorder is the mock recorder for MockEventScheduler
type MockEventSchedulerMockRecorder struct {
	mock *MockEventScheduler
}

// NewMockEventScheduler creates a new mock instance
func NewMockEventScheduler(ctrl *gomock.Controller) *MockEventScheduler {
	mock := &MockEventScheduler{ctrl: ctrl}
	mock.recorder = &MockEventSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventScheduler) EXPECT() *MockEventSchedulerMockRecorder {
	return m.recorder
}

// Schedule mocks base method
func (m *MockEventScheduler) Schedule(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Schedule indicates an expected call of Schedule
func (mr *MockEventSchedulerMockRecorder) Schedule(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockEventScheduler)(nil).Schedule), ctx)
}

// MockMetrolinkDeparturesLoader is a mock of MetrolinkDeparturesLoader interface
type MockMetrolinkDeparturesLoader struct {
	ctrl     *gomock.Controller
	recorder *MockMetrolinkDeparturesLoaderMockRecorder
}

// MockMetrolinkDeparturesLoaderMockRecorder is the mock recorder for MockMetrolinkDeparturesLoader
type MockMetrolinkDeparturesLoaderMockRecorder struct {
	mock *MockMetrolinkDeparturesLoader
}

// NewMockMetrolinkDeparturesLoader creates a new mock instance
func NewMockMetrolinkDeparturesLoader(ctrl *gomock.Controller) *MockMetrolinkDeparturesLoader {
	mock := &MockMetrolinkDeparturesLoader{ctrl: ctrl}
	mock.recorder = &MockMetrolinkDeparturesLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetrolinkDeparturesLoader) EXPECT() *MockMetrolinkDeparturesLoaderMockRecorder {
	return m.recorder
}

// Load mocks base method
func (m *MockMetrolinkDeparturesLoader) Load(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load
func (mr *MockMetrolinkDeparturesLoaderMockRecorder) Load(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockMetrolinkDeparturesLoader)(nil).Load), ctx)
}

// MockNaptanStopsInAreaLoader is a mock of NaptanStopsInAreaLoader interface
type MockNaptanStopsInAreaLoader struct {
	ctrl     *gomock.Controller
	recorder *MockNaptanStopsInAreaLoaderMockRecorder
}

// MockNaptanStopsInAreaLoaderMockRecorder is the mock recorder for MockNaptanStopsInAreaLoader
type MockNaptanStopsInAreaLoaderMockRecorder struct {
	mock *MockNaptanStopsInAreaLoader
}

// NewMockNaptanStopsInAreaLoader creates a new mock instance
func NewMockNaptanStopsInAreaLoader(ctrl *gomock.Controller) *MockNaptanStopsInAreaLoader {
	mock := &MockNaptanStopsInAreaLoader{ctrl: ctrl}
	mock.recorder = &MockNaptanStopsInAreaLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNaptanStopsInAreaLoader) EXPECT() *MockNaptanStopsInAreaLoaderMockRecorder {
	return m.recorder
}

// LoadStopsInArea mocks base method
func (m *MockNaptanStopsInAreaLoader) LoadStopsInArea(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadStopsInArea", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadStopsInArea indicates an expected call of LoadStopsInArea
func (mr *MockNaptanStopsInAreaLoaderMockRecorder) LoadStopsInArea(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadStopsInArea", reflect.TypeOf((*MockNaptanStopsInAreaLoader)(nil).LoadStopsInArea), ctx)
}
